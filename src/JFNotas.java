
import java.awt.Color;
import javax.swing.*;
import java.util.ArrayList;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Esquivel Oscar
 * @author Garbanzo Diana
 */
public class JFNotas extends javax.swing.JFrame {
    // Variables del JF para controlar las acciones
    private static ArrayList<String> arrayNotasProlog;
    private static ArrayList<String> arrayNotasInterfaz;
    private static double cantidadTiempos;
    private static int cantidadCompases;
    private static boolean limiteCompases;
    private static boolean notasCambiadas;
    private static ConexionProlog proyecto;
    
    /**
     * Constructor del JFrame
     */
    public JFNotas() {
        super("Composión algorítmica");
        initComponents();
        inicializarVariables();
    }
    
    /**
     * Inicializa las variables de control del JFrame
     */
    private void inicializarVariables(){
        // Variables utilizadas para composicion
        arrayNotasProlog = new ArrayList<>();
        arrayNotasInterfaz = new ArrayList<>();
        this.cantidadTiempos = 0;
        this.cantidadCompases = 0;
        this.limiteCompases = false;
        this.notasCambiadas = false;
        this.proyecto = new ConexionProlog();
        this.buttonVolverReproducir.setVisible(false);
        ocultarAgregarNotas(false);
        
        // Configuraciones de la interfaz
        setLayout(null);
        //setSize(454,556);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlSeleccionNotas = new javax.swing.JLabel();
        cbNotas = new javax.swing.JComboBox();
        buttonAgregar = new javax.swing.JButton();
        jlDuracion = new javax.swing.JLabel();
        cbDuracion = new javax.swing.JComboBox();
        buttonGenerar = new javax.swing.JButton();
        buttonAleatoria = new javax.swing.JButton();
        jlTipoComposicion = new javax.swing.JLabel();
        cbTipoPrueba = new javax.swing.JComboBox();
        jlInformacion = new javax.swing.JLabel();
        jlComplementoInfo = new javax.swing.JLabel();
        jlOctava = new javax.swing.JLabel();
        cbOctava = new javax.swing.JComboBox();
        jtfNotas = new javax.swing.JTextField();
        jLAuxiliar = new javax.swing.JLabel();
        buttonVolverReproducir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(454, 556));
        getContentPane().setLayout(null);

        jlSeleccionNotas.setForeground(new java.awt.Color(255, 255, 255));
        jlSeleccionNotas.setText("Seleccione la nota");
        getContentPane().add(jlSeleccionNotas);
        jlSeleccionNotas.setBounds(160, 120, 110, 14);

        cbNotas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Do", "Do#", "Re", "Re#", "Mi", "Fa", "Fa#", "Sol", "Sol#", "La", "La#", "Si" }));
        cbNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNotasActionPerformed(evt);
            }
        });
        getContentPane().add(cbNotas);
        cbNotas.setBounds(290, 120, 50, 20);

        buttonAgregar.setText("Agregar nota");
        buttonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarActionPerformed(evt);
            }
        });
        getContentPane().add(buttonAgregar);
        buttonAgregar.setBounds(210, 180, 131, 23);

        jlDuracion.setForeground(new java.awt.Color(255, 255, 255));
        jlDuracion.setText("Seleccione la duración");
        getContentPane().add(jlDuracion);
        jlDuracion.setBounds(140, 150, 130, 14);

        cbDuracion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4", "2", "1", "1/2", "1/4" }));
        getContentPane().add(cbDuracion);
        cbDuracion.setBounds(290, 150, 50, 20);

        buttonGenerar.setText("Generar canción");
        buttonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerarActionPerformed(evt);
            }
        });
        getContentPane().add(buttonGenerar);
        buttonGenerar.setBounds(210, 210, 131, 23);

        buttonAleatoria.setText("Generar canción aleatoria");
        buttonAleatoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAleatoriaActionPerformed(evt);
            }
        });
        getContentPane().add(buttonAleatoria);
        buttonAleatoria.setBounds(180, 60, 190, 23);

        jlTipoComposicion.setForeground(new java.awt.Color(255, 255, 255));
        jlTipoComposicion.setText("¿Qué tipo de composición desea?");
        getContentPane().add(jlTipoComposicion);
        jlTipoComposicion.setBounds(70, 30, 200, 14);

        cbTipoPrueba.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aleatoria", "Ingresar melodía" }));
        cbTipoPrueba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoPruebaActionPerformed(evt);
            }
        });
        getContentPane().add(cbTipoPrueba);
        cbTipoPrueba.setBounds(260, 30, 120, 20);

        jlInformacion.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jlInformacion);
        jlInformacion.setBounds(149, 238, 270, 20);
        getContentPane().add(jlComplementoInfo);
        jlComplementoInfo.setBounds(150, 260, 233, 15);

        jlOctava.setForeground(new java.awt.Color(255, 255, 255));
        jlOctava.setText("Selecciona la octava");
        getContentPane().add(jlOctava);
        jlOctava.setBounds(150, 90, 120, 14);

        cbOctava.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8" }));
        cbOctava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOctavaActionPerformed(evt);
            }
        });
        getContentPane().add(cbOctava);
        cbOctava.setBounds(290, 90, 50, 20);

        jtfNotas.setEditable(false);
        jtfNotas.setBackground(new java.awt.Color(0, 0, 0));
        jtfNotas.setForeground(new java.awt.Color(255, 255, 255));
        jtfNotas.setBorder(null);
        getContentPane().add(jtfNotas);
        jtfNotas.setBounds(140, 320, 200, 30);
        getContentPane().add(jLAuxiliar);
        jLAuxiliar.setBounds(160, 294, 210, 20);

        buttonVolverReproducir.setText("Reproducir de nuevo");
        buttonVolverReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVolverReproducirActionPerformed(evt);
            }
        });
        getContentPane().add(buttonVolverReproducir);
        buttonVolverReproducir.setBounds(200, 360, 150, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage/fondoInferior.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-30, -210, 670, 760);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNotasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbNotasActionPerformed

    /**
     * @param visible, el cual indica si deben estar o no visibles las variables
     * asociadas a la melodia
     */
    private void ocultarAgregarNotas(boolean visible) {
        // Labels asociadas a la melodia
        this.jlSeleccionNotas.setVisible(visible);
        this.jlDuracion.setVisible(visible);
        this.jlOctava.setVisible(visible);
        // Combo box asociados a la melodia
        this.cbNotas.setVisible(visible);
        this.cbDuracion.setVisible(visible);
        this.cbOctava.setVisible(visible);
        // Botones asociados a la melodia
        this.buttonAgregar.setVisible(visible);
        this.buttonGenerar.setVisible(visible);
    }
    
    /**
     * Coloca por default los valores de los combo box asociados a la melodia
     */
    private void limpiarComponentesMelodia() {
        // Selecciona el indice 0 de los combo box de melodia
        this.cbNotas.setSelectedIndex(0);
        this.cbDuracion.setSelectedIndex(0);
        this.cbOctava.setSelectedIndex(0);
        this.jtfNotas.setText("");
    }
    
    /**
     * @param evt, no se utiliza
     * Evento asociado a agregar una nueva nota. Actualiza variables y verifica
     * los limites. Ademas indica al usuario el resultado de la accion.
     */
    private void buttonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarActionPerformed
        try {
            // Verifica que el límite de compases no se haya sobrepasado
            if(!limiteCompases) {
                String tiempo;
                // Convierte la duracion, segun lo seleccionado
                if(this.cbDuracion.getSelectedIndex() == 3)
                    tiempo = "0.5";
                else if (this.cbDuracion.getSelectedIndex() == 4)
                    tiempo = "0.25";
                else
                    tiempo = cbDuracion.getSelectedItem().toString();
                // Verifica que el limite de compases no se sobrepase con la nueva nota
                if( (this.cantidadTiempos + Double.parseDouble(tiempo)) / 4 > 4 ){
                    this.jlInformacion.setText("Nota inválida. Máximo 4 compases de 4 tiempos.");
                    this.jlComplementoInfo.setText("Actualmente lleva " + this.cantidadTiempos + " tiempos.");
                    this.jlInformacion.setForeground(Color.red);
                    this.jlComplementoInfo.setForeground(Color.red);
                }
                else{
                    this.jLAuxiliar.setText("");
                    // Almacena las notas y su duracion
                    this.arrayNotasProlog.add(Integer.toString((cbNotas.getSelectedIndex() + 1) + (12 * cbOctava.getSelectedIndex())));
                    this.arrayNotasInterfaz.add(this.cbNotas.getSelectedItem().toString());
                    this.arrayNotasProlog.add(tiempo);
                    this.arrayNotasInterfaz.add(tiempo);
                    // Actualiza las notas a mostrar
                    if(this.jtfNotas.getText().isEmpty())
                        this.jtfNotas.setText(this.cbNotas.getSelectedItem().toString() + "," + this.cbDuracion.getSelectedItem());
                    else
                        this.jtfNotas.setText(jtfNotas.getText() + "," + this.cbNotas.getSelectedItem().toString() + "," + this.cbDuracion.getSelectedItem());
                    // Actualiza el conteo de la cantidad de tiempos que se llevan
                    this.cantidadTiempos += Double.parseDouble(tiempo);
                    // Verifica si debe actualizar la cantidad de compases
                    if(this.cantidadTiempos / 4 > this.cantidadCompases && this.cantidadTiempos % 4 == 0)
                        this.cantidadCompases += 1;
                    // Verifica si la cantidad de compases llego a su limite
                    if(this.cantidadCompases == 4)
                        this.limiteCompases = true;
                    // Mensaje de exito de la insercion de la nota
                    this.jlInformacion.setText("Nota "+ cbNotas.getSelectedItem().toString() +" ingresada, con tiempo " + cbDuracion.getSelectedItem().toString());
                    this.jlInformacion.setForeground(Color.white);
                    this.jlComplementoInfo.setText("");
                }
                
            } else {
                // Le indica al usuario que no se pueden ingresar mas compases
                this.jlInformacion.setText("Ha llegado al límite de compases.");
                this.jlInformacion.setForeground(Color.red);
                this.jlComplementoInfo.setText("Por favor seleccione 'Generar canción.'");
                this.jlComplementoInfo.setForeground(Color.red);
            }
        }  catch(Exception e) {
            // Mensaje de error 
            this.jlInformacion.setText("La nota no se pudo almacenar.");
            this.jlInformacion.setForeground(Color.red);
            this.jlComplementoInfo.setText("");
        } 
    }//GEN-LAST:event_buttonAgregarActionPerformed

    /**
     * @param evt, no se utiliza
     * Evento asociado a la escogencia del tipo de prueba por realizar.
     * Muestra los elementos necesarios de acuerdo con la seleccion.
     */
    private void cbTipoPruebaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoPruebaActionPerformed
        // TODO add your handling code here:
        if(this.cbTipoPrueba.getSelectedIndex() == 0) {
            //Boton para generar aleatoriamente visible
            this.buttonAleatoria.setVisible(true);
            // Limpia variables
            limpiarVariablesConteo();
            // Labels informativas limpias
            this.jlInformacion.setText("");
            this.jlComplementoInfo.setText("");
            // Se ocultan los componentes de agregar melodia
            ocultarAgregarNotas(false);
        } else {
            // Se ponen visibles los componentes de agregar melodia
            ocultarAgregarNotas(true);
            // Se oculta el componente para generar cancion aleatoria
            this.buttonAleatoria.setVisible(false);
            // Metodo para seleccionar indice de combo box de melodia
            limpiarComponentesMelodia();
        }
        this.buttonVolverReproducir.setVisible(false);
    }//GEN-LAST:event_cbTipoPruebaActionPerformed

    /**
     * @param evt, no se utiliza
     * Evento asociado al boton de generar cancion aleatoria.
     * LLama a la regla asociada.
     */
    private void buttonAleatoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAleatoriaActionPerformed
        // Llama a compositor para generar cancion de forma aleatoria 
        String[] notasYduraciones = proyecto.ejecutarConsulta(false,"",true);
        reproducirNotas(notasYduraciones);
        this.buttonVolverReproducir.setVisible(true);
    }//GEN-LAST:event_buttonAleatoriaActionPerformed

    /**
     * @param evt, no se utiliza
     * Evento asociado a generar cancion a partir con una melodia. Encargado de
     * verificar que los tiempos son los adeucado o le informa al usuario lo 
     * contrario. Ademas, le solicita confirmacion al usuario o la opcion de
     * cancelarlo. Si confirma, se llama a Prolog, con la lista ingresada como
     * parametro.
     */
    private void buttonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerarActionPerformed
            // Verifica que los tiempos sean multiplos de 4
        if (!(this.cantidadTiempos % 4 == 0.0)) {
            // Informa al usuario que deben ser multiplos de 4
            this.jlInformacion.setText("Los compases deben ser múltiplos de 4.");
            this.jlComplementoInfo.setText("Actualmente lleva " + this.cantidadTiempos);
            this.jlInformacion.setForeground(Color.red);
            this.jlComplementoInfo.setForeground(Color.red);
        }  else {
            JFrame frame = new JFrame();
            // Limpia labels de informacion
            this.jlInformacion.setText("");
            this.jlComplementoInfo.setText("");
            // Obtiene las notas ingresadas
            String listaMelodiaInterfaz = obtenerListaNotas(this.arrayNotasInterfaz);
            String listaMelodiaProlog = obtenerListaNotas(this.arrayNotasProlog);
            System.out.println(listaMelodiaInterfaz);
            System.out.println(listaMelodiaProlog);
            // Mensaje con las notas, para confirmacion del usuario
            String mensaje = "La lista de notas es: " + listaMelodiaInterfaz + ". ¿Desea continuar?";
            // Se le muestra al usuario la opcion
            int respuesta = JOptionPane.showConfirmDialog(frame, mensaje);
            if (respuesta == JOptionPane.YES_OPTION) {
                // Llama a PROLOG para que ejecute la regla
                String[] notasYduraciones = this.proyecto.ejecutarConsulta(true, listaMelodiaProlog,true);
                // Prueba temporal de llamada a player
                Player player = new Player();
                player.playMusic(notasYduraciones);
                this.buttonVolverReproducir.setVisible(true);
            } else if (respuesta == JOptionPane.NO_OPTION) {
                // Le solicita al usuario el ingreso de las nuevas notas
                this.jlInformacion.setText("Ingrese las nuevas notas que desea.");
                this.jlInformacion.setForeground(Color.red);
            }
            limpiarComponentesMelodia();
            limpiarVariablesConteo();
        }    
    }//GEN-LAST:event_buttonGenerarActionPerformed

    private void cbOctavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOctavaActionPerformed
        if(this.cbOctava.getSelectedIndex() == 7) {
            this.cbNotas.removeAllItems();
            this.cbNotas.addItem("Do");
            this.cbNotas.addItem("Do#");
            this.cbNotas.addItem("Re");
            this.cbNotas.addItem("Re#");
            this.notasCambiadas = true;
        }
        else if(this.notasCambiadas == true) {
            this.cbNotas.addItem("Mi");
            this.cbNotas.addItem("Fa");
            this.cbNotas.addItem("Fa#");
            this.cbNotas.addItem("Sol");
            this.cbNotas.addItem("Sol#");
            this.cbNotas.addItem("La");
            this.cbNotas.addItem("La#");
            this.cbNotas.addItem("Si");
            this.notasCambiadas = false;
        }
    }//GEN-LAST:event_cbOctavaActionPerformed

    private void buttonVolverReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVolverReproducirActionPerformed
        String[] notasYduraciones = proyecto.ejecutarConsulta(false,"",false);
        reproducirNotas(notasYduraciones);
    }//GEN-LAST:event_buttonVolverReproducirActionPerformed
    
    private void reproducirNotas(String[] notasYduraciones)
    {
        Player player = new Player();
        player.playMusic(notasYduraciones);
    }
    
    private String obtenerListaNotas(ArrayList<String> arrayPorRecorrer){
        String resultado = "[";
        // Recorrido sobre el array para obtener las notas y su duracion
        for(int i = 0; i < arrayPorRecorrer.size(); i ++) {
            resultado += arrayPorRecorrer.get(i);
            if(i != arrayPorRecorrer.size() - 1) {
                resultado += ", ";
            }
        }
        resultado += "]";
        return resultado;
    }
    
    private void limpiarVariablesConteo() {
        // Variables de conteo limpias
            this.cantidadTiempos = 0.0;
            this.cantidadCompases = 0;
            this.limiteCompases = false;
            this.arrayNotasProlog.clear();
            this.arrayNotasInterfaz.clear();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAgregar;
    private javax.swing.JButton buttonAleatoria;
    private javax.swing.JButton buttonGenerar;
    private javax.swing.JButton buttonVolverReproducir;
    private javax.swing.JComboBox cbDuracion;
    private javax.swing.JComboBox cbNotas;
    private javax.swing.JComboBox cbOctava;
    private javax.swing.JComboBox cbTipoPrueba;
    private javax.swing.JLabel jLAuxiliar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jlComplementoInfo;
    private javax.swing.JLabel jlDuracion;
    private javax.swing.JLabel jlInformacion;
    private javax.swing.JLabel jlOctava;
    private javax.swing.JLabel jlSeleccionNotas;
    private javax.swing.JLabel jlTipoComposicion;
    private javax.swing.JTextField jtfNotas;
    // End of variables declaration//GEN-END:variables
}
